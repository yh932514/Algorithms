/********************************
//Given a string, find the length of the longest substring without repeating characters.

//Example 1:

//Input: "abcabcbb"
//Output: 3 
//Explanation: The answer is "abc", with the length of 3. 
//Example 2:

//Input: "bbbbb"
//Output: 1
//Explanation: The answer is "b", with the length of 1.
//Example 3:

//Input: "pwwkew"
//Output: 3
//Explanation: The answer is "wke", with the length of 3. 
//            Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
*******************************/
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
            if(s.length() ==1)
                return 1;
            int newl=1, longest=0;
            for(int i =1; i<s.length(); i++){
                newl = nlong(i,s);
                longest = max(longest,newl);
            }  
       return longest; 
    }
    
    int nlong(int current0, string s){
        int count = 0, longest = 1;
        for(int i=current0; i<s.length(); i++){
            if(s[i]!=s[i-1] && count==0)
                longest ++; 
            else{
                    int j =i-1;
                    while(j>=current0-1){
                        if(s[i] != s[j]){
                            if(j==current0-1){
                                longest ++;
                            }                                
                            j--;}
                        else
                            {j=-1;
                            i=s.length();}    //exit the to for loop
                    }
                }
            count ++;
            }
        return longest;
    }
};
